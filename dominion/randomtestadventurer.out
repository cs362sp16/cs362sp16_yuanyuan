Test for adventurer Beginning.
Running round: 1
players:2
player:1
handcount before:13  handcount after:15
Test successed
Running round: 2
players:3
player:2
handcount before:9  handcount after:11
Test successed
Running round: 3
players:3
player:2
handcount before:14  handcount after:16
Test successed
Running round: 4
players:1
player:0
handcount before:7  handcount after:9
Test successed
Running round: 5
players:3
player:0
handcount before:8  handcount after:10
Test successed
Running round: 6
players:4
player:1
handcount before:5  handcount after:7
Test successed
Running round: 7
players:1
player:0
handcount before:14  handcount after:16
Test successed
Running round: 8
players:2
player:1
handcount before:5  handcount after:7
Test successed
Running round: 9
players:2
player:1
handcount before:13  handcount after:15
Test successed
Running round: 10
players:1
player:0
handcount before:12  handcount after:14
Test successed
Running round: 11
players:3
player:2
handcount before:12  handcount after:14
Test successed
Running round: 12
players:3
player:0
handcount before:14  handcount after:16
Test successed
Running round: 13
players:2
player:1
handcount before:6  handcount after:8
Test successed
Running round: 14
players:4
player:0
handcount before:8  handcount after:10
Test successed
Running round: 15
players:1
player:0
handcount before:10  handcount after:12
Test successed
Running round: 16
players:1
player:0
handcount before:9  handcount after:9
Test failed
Running round: 17
players:2
player:1
handcount before:8  handcount after:10
Test successed
Running round: 18
players:1
player:0
handcount before:13  handcount after:15
Test successed
Running round: 19
players:3
player:0
handcount before:11  handcount after:13
Test successed
Running round: 20
players:3
player:1
handcount before:7  handcount after:9
Test successed
Running round: 21
players:3
player:0
handcount before:9  handcount after:11
Test successed
Running round: 22
players:2
player:1
handcount before:12  handcount after:14
Test successed
Running round: 23
players:1
player:0
handcount before:8  handcount after:10
Test successed
Running round: 24
players:3
player:1
handcount before:10  handcount after:12
Test successed
Running round: 25
players:2
player:1
handcount before:9  handcount after:11
Test successed
Running round: 26
players:4
player:0
handcount before:10  handcount after:12
Test successed
Running round: 27
players:2
player:1
handcount before:9  handcount after:11
Test successed
Running round: 28
players:2
player:1
handcount before:12  handcount after:14
Test successed
Running round: 29
players:4
player:1
handcount before:9  handcount after:11
Test successed
Running round: 30
players:4
player:2
handcount before:13  handcount after:15
Test successed
Running round: 31
players:4
player:1
handcount before:7  handcount after:9
Test successed
Running round: 32
players:1
player:0
handcount before:11  handcount after:13
Test successed
Running round: 33
players:2
player:0
handcount before:9  handcount after:11
Test successed
Running round: 34
players:2
player:1
handcount before:6  handcount after:8
Test successed
Running round: 35
players:1
player:0
handcount before:13  handcount after:15
Test successed
Running round: 36
players:2
player:1
handcount before:9  handcount after:11
Test successed
Running round: 37
players:1
player:0
handcount before:6  handcount after:8
Test successed
Running round: 38
players:2
player:1
handcount before:10  handcount after:12
Test successed
Running round: 39
players:3
player:1
handcount before:14  handcount after:16
Test successed
Running round: 40
players:1
player:0
handcount before:5  handcount after:7
Test successed
Running round: 41
players:2
player:0
handcount before:13  handcount after:15
Test successed
Running round: 42
players:4
player:0
handcount before:8  handcount after:10
Test successed
Running round: 43
players:3
player:1
handcount before:7  handcount after:9
Test successed
Running round: 44
players:3
player:1
handcount before:7  handcount after:9
Test successed
Running round: 45
players:1
player:0
handcount before:6  handcount after:8
Test successed
Running round: 46
players:4
player:0
handcount before:6  handcount after:8
Test successed
Running round: 47
players:2
player:0
handcount before:6  handcount after:8
Test successed
Running round: 48
players:3
player:0
handcount before:11  handcount after:13
Test successed
Running round: 49
players:3
player:2
handcount before:14  handcount after:16
Test successed
Running round: 50
players:4
player:2
handcount before:7  handcount after:9
Test successed
GCOV AFTER 1 TEST adventurer
File 'dominion.c'
Lines executed:33.84% of 653
dominion.c:creating 'dominion.c.gcov'

Coverage for each function
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:97.44% of 78
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:78.57% of 14
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'getCost'
Lines executed:23.33% of 30
Branches executed:100.00% of 28
Taken at least once:17.86% of 28
No calls

Function 'cardEffect'
Lines executed:9.13% of 219
Branches executed:16.78% of 149
Taken at least once:4.03% of 149
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'cardEffect_adventurer'
Lines executed:100.00% of 16
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
No calls

Function 'cardEffect_council_room'
Lines executed:100.00% of 10
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'cardEffect_feast'
Lines executed:0.00% of 20
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'cardEffect_mine'
Lines executed:0.00% of 17
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
No calls

Function 'cardEffect_remodel'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect_smithy'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

File 'dominion.c'
Lines executed:33.84% of 653
Branches executed:38.13% of 417
Taken at least once:24.70% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1764 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
     1764:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
     1764:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      630:   12:    return -1;
     1134:   13:  return 0;
     1764:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 59 returned 100% blocks executed 97%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       59:   44:  SelectStream(1);
       59:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
      118:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 20%
branch  3 taken 80%
        -:   49:    {
       12:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       47:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1034:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
    10340:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     8930:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
     4700:   65:        }
      470:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       47:   73:  if (numPlayers == 2)
branch  0 taken 51%
branch  1 taken 49%
        -:   74:    {
       24:   75:      state->supplyCount[curse] = 10;
       24:   76:    }
       23:   77:  else if (numPlayers == 3)
branch  0 taken 61%
branch  1 taken 39%
        -:   78:    {
       14:   79:      state->supplyCount[curse] = 20;
       14:   80:    }
        -:   81:  else
        -:   82:    {
        9:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       47:   87:  if (numPlayers == 2)
branch  0 taken 51%
branch  1 taken 49%
        -:   88:    {
       24:   89:      state->supplyCount[estate] = 8;
       24:   90:      state->supplyCount[duchy] = 8;
       24:   91:      state->supplyCount[province] = 8;
       24:   92:    }
        -:   93:  else
        -:   94:    {
       23:   95:      state->supplyCount[estate] = 12;
       23:   96:      state->supplyCount[duchy] = 12;
       23:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       47:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       47:  102:  state->supplyCount[silver] = 40;
       47:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1974:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
    15510:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
     7285:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      940:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 10%
branch  3 taken 90%
        -:  114:		{
       47:  115:		  if (numPlayers == 2){
branch  0 taken 51%
branch  1 taken 49%
       24:  116:		    state->supplyCount[i] = 8;
       24:  117:		  }
       23:  118:		  else{ state->supplyCount[i] = 12; }
       47:  119:		}
        -:  120:	      else
        -:  121:		{
      423:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      470:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     6815:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     6815:  130:	}
        -:  131:
      940:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      346:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27%
        -:  139:    {
      126:  140:      state->deckCount[i] = 0;
     1008:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
      378:  143:	  state->deck[i][j] = estate;
      378:  144:	  state->deckCount[i]++;
      378:  145:	}
     2016:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
      882:  148:	  state->deck[i][j] = copper;
      882:  149:	  state->deckCount[i]++;
      882:  150:	}
      126:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      346:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27%
        -:  155:    {
      126:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
      126:  160:    }
        -:  161:
        -:  162:  //draw player hands
      346:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27%
        -:  164:    {
        -:  165:      //initialize hand size to zero
      126:  166:      state->handCount[i] = 0;
      126:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
      126:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
     2632:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
     1269:  178:      state->embargoTokens[i] = 0;
     1269:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       47:  182:  state->outpostPlayed = 0;
       47:  183:  state->phase = 0;
       47:  184:  state->numActions = 1;
       47:  185:  state->numBuys = 1;
       47:  186:  state->playedCardCount = 0;
       47:  187:  state->whoseTurn = 0;
       47:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      564:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
      235:  193:    drawCard(state->whoseTurn, state);
      235:  194:  }
        -:  195:
       47:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       47:  198:  return 0;
       59:  199:}
        -:  200:
function shuffle called 132 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      132:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      132:  209:  if (state->deckCount[player] < 1)
branch  0 taken 4%
branch  1 taken 96%
        5:  210:    return -1;
      127:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2776:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
     1261:  215:    card = floor(Random() * state->deckCount[player]);
     1261:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1261:  217:    newDeckPos++;
     9058:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28%
     3268:  219:      state->deck[player][i] = state->deck[player][i+1];
     3268:  220:    }
     1261:  221:    state->deckCount[player]--;
        -:  222:  }
     2776:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
     1261:  224:    state->deck[player][i] = newDeck[i];
     1261:  225:    state->deckCount[player]++;
     1261:  226:  }
        -:  227:
      127:  228:  return 0;
      132:  229:}
        -:  230:
function playCard called 2 returned 100% blocks executed 75%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
        2:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        2:  237:  if (state->phase != 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
        2:  243:  if ( state->numActions < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
        2:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
        3:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 100%
        -:  253:    {
        1:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
        1:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
        1:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        1:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
        1:  269:  return 0;
        2:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
    #####:  281:  if(supplyPos == -1){
branch  0 never executed
branch  1 never executed
    #####:  282:    return -1;
        -:  283:  }
        -:  284:
        -:  285:
    #####:  286:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("You do not have any buys left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
    #####:  293:    return -1;
    #####:  294:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  295:    if (DEBUG)
        -:  296:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:    return -1;
        -:  298:  } else {
    #####:  299:    state->phase=1;
        -:  300:    //state->supplyCount[supplyPos]--;
    #####:  301:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  302:
    #####:  303:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  304:    state->numBuys--;
        -:  305:    if (DEBUG)
        -:  306:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:  }
        -:  308:
        -:  309:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:  //state->discardCount[who]++;
        -:  311:
    #####:  312:  return 0;
    #####:  313:}
        -:  314:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  315:int numHandCards(struct gameState *state) {
    #####:  316:  return state->handCount[ whoseTurn(state) ];
        -:  317:}
        -:  318:
function handCard called 2 returned 100% blocks executed 100%
        -:  319:int handCard(int handPos, struct gameState *state) {
        2:  320:  int currentPlayer = whoseTurn(state);
        2:  321:  return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  324:int supplyCount(int card, struct gameState *state) {
    #####:  325:  return state->supplyCount[card];
        -:  326:}
        -:  327:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:  int i;
    #####:  330:  int count = 0;
        -:  331:
    #####:  332:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  340:    }
        -:  341:
    #####:  342:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  345:    }
        -:  346:
    #####:  347:  return count;
        -:  348:}
        -:  349:
function whoseTurn called 59 returned 100% blocks executed 100%
        -:  350:int whoseTurn(struct gameState *state) {
       59:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
function endTurn called 0 returned 0% blocks executed 0%
        -:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
    #####:  357:  int currentPlayer = whoseTurn(state);
        -:  358:
        -:  359:  //Discard hand
    #####:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  363:  }
    #####:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:
        -:  366:  //Code for determining the player
    #####:  367:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  369:  }
        -:  370:  else{
    #####:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
    #####:  374:  state->outpostPlayed = 0;
    #####:  375:  state->phase = 0;
    #####:  376:  state->numActions = 1;
    #####:  377:  state->coins = 0;
    #####:  378:  state->numBuys = 1;
    #####:  379:  state->playedCardCount = 0;
    #####:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
    #####:  384:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  385:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  386:  }
        -:  387:
        -:  388:  //Update money
    #####:  389:  updateCoins(state->whoseTurn, state , 0);
        -:  390:
    #####:  391:  return 0;
        -:  392:}
        -:  393:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:
        -:  398:  //if stack of Province cards is empty, the game ends
    #####:  399:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  400:    {
    #####:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
    #####:  405:  j = 0;
    #####:  406:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  407:    {
    #####:  408:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  409:	{
    #####:  410:	  j++;
    #####:  411:	}
    #####:  412:    }
    #####:  413:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  414:    {
    #####:  415:      return 1;
        -:  416:    }
        -:  417:
    #####:  418:  return 0;
    #####:  419:}
        -:  420:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
    #####:  424:  int score = 0;
        -:  425:  //score from hand
    #####:  426:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  427:    {
    #####:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  434:    }
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  445:    }
        -:  446:
        -:  447:  //score from deck
    #####:  448:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  449:    {
    #####:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  456:    }
        -:  457:
    #####:  458:  return score;
        -:  459:}
        -:  460:
function getWinners called 0 returned 0% blocks executed 0%
        -:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  472:	{
    #####:  473:	  players[i] = -9999;
    #####:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
        -:  478:	}
    #####:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  486:	{
    #####:  487:	  j = i;
    #####:  488:	}
    #####:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  497:	{
    #####:  498:	  players[i]++;
    #####:  499:	}
    #####:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  507:	{
    #####:  508:	  j = i;
    #####:  509:	}
    #####:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  517:	{
    #####:  518:	  players[i] = 1;
    #####:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
    #####:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
function drawCard called 384 returned 100% blocks executed 100%
        -:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
      384:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  533:
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
        8:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 25%
branch  1 taken 75%
        1:  538:      state->deck[player][i] = state->discard[player][i];
        1:  539:      state->discard[player][i] = -1;
        1:  540:    }
        -:  541:
        3:  542:    state->deckCount[player] = state->discardCount[player];
        3:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
        3:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:
        -:  548:    /*if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }*/
        -:  551:
        3:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
        3:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:
        -:  557:    /*if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }*/
        -:  560:
        3:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
        3:  563:    if (deckCounter == 0)
branch  0 taken 67%
branch  1 taken 33%
        2:  564:      return -1;
        -:  565:
        1:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  567:    state->deckCount[player]--;
        1:  568:    state->handCount[player]++;//Increment hand count
        1:  569:  }
        -:  570:
        -:  571:  else{
      381:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
      381:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
      381:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      381:  580:    state->deckCount[player]--;
      381:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
      382:  584:  return 0;
      384:  585:}
        -:  586:
function getCost called 5 returned 100% blocks executed 25%
        -:  587:int getCost(int cardNumber)
        -:  588:{
        5:  589:  switch( cardNumber )
branch  0 taken 20%
branch  1 taken 20%
branch  2 taken 20%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 20%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 20%
        -:  590:    {
        -:  591:    case curse:
        1:  592:      return 0;
        -:  593:    case estate:
        1:  594:      return 2;
        -:  595:    case duchy:
        1:  596:      return 5;
        -:  597:    case province:
    #####:  598:      return 8;
        -:  599:    case copper:
    #####:  600:      return 0;
        -:  601:    case silver:
    #####:  602:      return 3;
        -:  603:    case gold:
    #####:  604:      return 6;
        -:  605:    case adventurer:
    #####:  606:      return 6;
        -:  607:    case council_room:
    #####:  608:      return 5;
        -:  609:    case feast:
    #####:  610:      return 4;
        -:  611:    case gardens:
    #####:  612:      return 4;
        -:  613:    case mine:
    #####:  614:      return 5;
        -:  615:    case remodel:
    #####:  616:      return 4;
        -:  617:    case smithy:
        1:  618:      return 4;
        -:  619:    case village:
    #####:  620:      return 3;
        -:  621:    case baron:
    #####:  622:      return 4;
        -:  623:    case great_hall:
    #####:  624:      return 3;
        -:  625:    case minion:
    #####:  626:      return 5;
        -:  627:    case steward:
    #####:  628:      return 3;
        -:  629:    case tribute:
    #####:  630:      return 5;
        -:  631:    case ambassador:
    #####:  632:      return 3;
        -:  633:    case cutpurse:
    #####:  634:      return 4;
        -:  635:    case embargo:
    #####:  636:      return 2;
        -:  637:    case outpost:
    #####:  638:      return 5;
        -:  639:    case salvager:
    #####:  640:      return 4;
        -:  641:    case sea_hag:
    #####:  642:      return 4;
        -:  643:    case treasure_map:
    #####:  644:      return 4;
        -:  645:    }
        -:  646:
        1:  647:  return -1;
        5:  648:}
        -:  649:
function cardEffect called 53 returned 100% blocks executed 5%
        -:  650:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  651:{
        -:  652:  int i;
        -:  653:  int j;
        -:  654:  int k;
        -:  655:  int x;
        -:  656:  int index;
       53:  657:  int currentPlayer = whoseTurn(state);
       53:  658:  int nextPlayer = currentPlayer + 1;
        -:  659:
       53:  660:  int tributeRevealedCards[2] = {-1, -1};
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
       53:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
       53:  664:  int z = 0;// this is the counter for the temp hand
       53:  665:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 30%
branch  1 taken 70%
       16:  666:    nextPlayer = 0;
       16:  667:  }
        -:  668:
        -:  669:
        -:  670:  //uses switch to select card and perform actions
       53:  671:  switch( card )
branch  0 taken 96%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 2%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 2%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  672:    {
        -:  673:      case adventurer:
       51:  674:        return cardEffect_adventurer(drawntreasure,currentPlayer,z,state);
        -:  675:
        -:  676:      case council_room:
        -:  677:        //+4 Cards
    #####:  678:        return cardEffect_council_room(handPos,state);
        -:  679:
        -:  680:      case feast:
        -:  681:        //gain card with cost up to 5
        -:  682:        //Backup hand
    #####:  683:        return cardEffect_feast(choice1,state);
        -:  684:
        -:  685:      case gardens:
    #####:  686:        return -1;
        -:  687:
        -:  688:      case mine:
    #####:  689:        return cardEffect_mine(handPos,choice1,choice2,state);
        -:  690:
        -:  691:      case remodel:
    #####:  692:        return cardEffect_remodel(handPos,choice1,choice2,state);
        -:  693:
        -:  694:      case smithy:
        -:  695:        //+3 Cards
    #####:  696:        return cardEffect_smithy(handPos,state);
        -:  697:
        -:  698:    case village:
        -:  699:      //+1 Card
    #####:  700:      drawCard(currentPlayer, state);
        -:  701:
        -:  702:      //+2 Actions
    #####:  703:      state->numActions = state->numActions + 2;
        -:  704:
        -:  705:      //discard played card from hand
    #####:  706:      discardCard(handPos, currentPlayer, state, 0);
    #####:  707:      return 0;
        -:  708:
        -:  709:    case baron:
    #####:  710:      state->numBuys++;//Increase buys by 1!
    #####:  711:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  712:	int p = 0;//Iterator for hand!
    #####:  713:	int card_not_discarded = 1;//Flag for discard set!
    #####:  714:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  715:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  716:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  717:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  718:	    state->discardCount[currentPlayer]++;
    #####:  719:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  720:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  721:	    }
    #####:  722:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  723:	    state->handCount[currentPlayer]--;
    #####:  724:	    card_not_discarded = 0;//Exit the loop
    #####:  725:	  }
    #####:  726:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  727:	    if(DEBUG) {
        -:  728:	      printf("No estate cards in your hand, invalid choice\n");
        -:  729:	      printf("Must gain an estate if there are any\n");
        -:  730:	    }
    #####:  731:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  732:	      gainCard(estate, state, 0, currentPlayer);
    #####:  733:	      state->supplyCount[estate]--;//Decrement estates
    #####:  734:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  735:		isGameOver(state);
    #####:  736:	      }
    #####:  737:	    }
    #####:  738:	    card_not_discarded = 0;//Exit the loop
    #####:  739:	  }
        -:  740:
        -:  741:	  else{
    #####:  742:	    p++;//Next card
        -:  743:	  }
        -:  744:	}
    #####:  745:      }
        -:  746:
        -:  747:      else{
    #####:  748:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  749:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  750:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  751:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  752:	    isGameOver(state);
    #####:  753:	  }
    #####:  754:	}
        -:  755:      }
        -:  756:
        -:  757:
    #####:  758:      return 0;
        -:  759:
        -:  760:    case great_hall:
        -:  761:      //+1 Card
    #####:  762:      drawCard(currentPlayer, state);
        -:  763:
        -:  764:      //+1 Actions
    #####:  765:      state->numActions++;
        -:  766:
        -:  767:      //discard card from hand
    #####:  768:      discardCard(handPos, currentPlayer, state, 0);
    #####:  769:      return 0;
        -:  770:
        -:  771:    case minion:
        -:  772:      //+1 action
        1:  773:      state->numActions++;
        -:  774:
        -:  775:      //discard card from hand
        1:  776:      discardCard(handPos, currentPlayer, state, 0);
        -:  777:
        1:  778:      if (choice1)		//+2 coins
branch  0 taken 100%
branch  1 taken 0%
        -:  779:	{
        1:  780:	  state->coins = state->coins + 2;
        1:  781:	}
        -:  782:
    #####:  783:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  784:	{
        -:  785:	  //discard hand
    #####:  786:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(handPos, currentPlayer, state, 0);
        -:  789:	    }
        -:  790:
        -:  791:	  //draw 4
    #####:  792:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  793:	    {
    #####:  794:	      drawCard(currentPlayer, state);
    #####:  795:	    }
        -:  796:
        -:  797:	  //other players discard hand and redraw if hand size > 4
    #####:  798:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	    {
    #####:  800:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  801:		{
    #####:  802:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  803:		    {
        -:  804:		      //discard hand
    #####:  805:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  806:			{
    #####:  807:			  discardCard(handPos, i, state, 0);
        -:  808:			}
        -:  809:
        -:  810:		      //draw 4
    #####:  811:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  812:			{
    #####:  813:			  drawCard(i, state);
    #####:  814:			}
    #####:  815:		    }
    #####:  816:		}
    #####:  817:	    }
        -:  818:
    #####:  819:	}
        1:  820:      return 0;
        -:  821:
        -:  822:    case steward:
    #####:  823:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  824:	{
        -:  825:	  //+2 cards
    #####:  826:	  drawCard(currentPlayer, state);
    #####:  827:	  drawCard(currentPlayer, state);
    #####:  828:	}
    #####:  829:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  830:	{
        -:  831:	  //+2 coins
    #####:  832:	  state->coins = state->coins + 2;
    #####:  833:	}
        -:  834:      else
        -:  835:	{
        -:  836:	  //trash 2 cards in hand
    #####:  837:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  838:	  discardCard(choice3, currentPlayer, state, 1);
        -:  839:	}
        -:  840:
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
    #####:  843:      return 0;
        -:  844:
        -:  845:    case tribute:
    #####:  846:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  847:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  848:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  849:	  state->deckCount[nextPlayer]--;
    #####:  850:	}
    #####:  851:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  852:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  853:	  state->discardCount[nextPlayer]--;
    #####:  854:	}
        -:  855:	else{
        -:  856:	  //No Card to Reveal
        -:  857:	  if (DEBUG){
        -:  858:	    printf("No cards to reveal\n");
        -:  859:	  }
        -:  860:	}
    #####:  861:      }
        -:  862:
        -:  863:      else{
    #####:  864:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  865:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  866:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  867:	    state->deckCount[nextPlayer]++;
    #####:  868:	    state->discard[nextPlayer][i] = -1;
    #####:  869:	    state->discardCount[nextPlayer]--;
    #####:  870:	  }
        -:  871:
    #####:  872:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  873:	}
    #####:  874:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  875:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  876:	state->deckCount[nextPlayer]--;
    #####:  877:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  878:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  879:	state->deckCount[nextPlayer]--;
        -:  880:      }
        -:  881:
    #####:  882:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  883:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  884:	state->playedCardCount++;
    #####:  885:	tributeRevealedCards[1] = -1;
    #####:  886:      }
        -:  887:
    #####:  888:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  889:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  890:	  state->coins += 2;
    #####:  891:	}
        -:  892:
    #####:  893:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  894:	  drawCard(currentPlayer, state);
    #####:  895:	  drawCard(currentPlayer, state);
    #####:  896:	}
        -:  897:	else{//Action Card
    #####:  898:	  state->numActions = state->numActions + 2;
        -:  899:	}
    #####:  900:      }
        -:  901:
    #####:  902:      return 0;
        -:  903:
        -:  904:    case ambassador:
    #####:  905:      j = 0;		//used to check if player has enough cards to discard
        -:  906:
    #####:  907:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  908:	{
    #####:  909:	  return -1;
        -:  910:	}
        -:  911:
    #####:  912:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  913:	{
    #####:  914:	  return -1;
        -:  915:	}
        -:  916:
    #####:  917:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  918:	{
    #####:  919:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  920:	    {
    #####:  921:	      j++;
    #####:  922:	    }
    #####:  923:	}
    #####:  924:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
        -:  929:      if (DEBUG)
        -:  930:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  931:
        -:  932:      //increase supply count for choosen card by amount being discarded
    #####:  933:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  934:
        -:  935:      //each other player gains a copy of revealed card
    #####:  936:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  937:	{
    #####:  938:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  939:	    {
    #####:  940:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  941:	    }
    #####:  942:	}
        -:  943:
        -:  944:      //discard played card from hand
    #####:  945:      discardCard(handPos, currentPlayer, state, 0);
        -:  946:
        -:  947:      //trash copies of cards returned to supply
    #####:  948:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  949:	{
    #####:  950:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  951:	    {
    #####:  952:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  953:		{
    #####:  954:		  discardCard(i, currentPlayer, state, 1);
    #####:  955:		  break;
        -:  956:		}
    #####:  957:	    }
    #####:  958:	}
        -:  959:
    #####:  960:      return 0;
        -:  961:
        -:  962:    case cutpurse:
        -:  963:
    #####:  964:      updateCoins(currentPlayer, state, 2);
    #####:  965:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  970:		{
    #####:  971:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  972:		    {
    #####:  973:		      discardCard(j, i, state, 0);
    #####:  974:		      break;
        -:  975:		    }
    #####:  976:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  977:		    {
    #####:  978:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  979:			{
        -:  980:			  if (DEBUG)
        -:  981:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  982:			}
    #####:  983:		      break;
        -:  984:		    }
    #####:  985:		}
        -:  986:
    #####:  987:	    }
        -:  988:
    #####:  989:	}
        -:  990:
        -:  991:      //discard played card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:
    #####:  994:      return 0;
        -:  995:
        -:  996:
        -:  997:    case embargo:
        -:  998:      //+2 Coins
    #####:  999:      state->coins = state->coins + 2;
        -: 1000:
        -: 1001:      //see if selected pile is in play
    #####: 1002:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1003:	{
    #####: 1004:	  return -1;
        -: 1005:	}
        -: 1006:
        -: 1007:      //add embargo token to selected supply pile
    #####: 1008:      state->embargoTokens[choice1]++;
        -: 1009:
        -: 1010:      //trash card
    #####: 1011:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1012:      return 0;
        -: 1013:
        -: 1014:    case outpost:
        -: 1015:      //set outpost flag
        1: 1016:      state->outpostPlayed++;
        -: 1017:
        -: 1018:      //discard card
        1: 1019:      discardCard(handPos, currentPlayer, state, 0);
        1: 1020:      return 0;
        -: 1021:
        -: 1022:    case salvager:
        -: 1023:      //+1 buy
    #####: 1024:      state->numBuys++;
        -: 1025:
    #####: 1026:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
        -: 1028:	  //gain coins equal to trashed card
    #####: 1029:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1030:	  //trash card
    #####: 1031:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1032:	}
        -: 1033:
        -: 1034:      //discard card
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:    case sea_hag:
    #####: 1039:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1041:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1042:	  state->discardCount[i]++;
    #####: 1043:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1044:	}
    #####: 1045:      }
    #####: 1046:      return 0;
        -: 1047:
        -: 1048:    case treasure_map:
        -: 1049:      //search hand for another treasure_map
    #####: 1050:      index = -1;
    #####: 1051:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1052:	{
    #####: 1053:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1054:	    {
    #####: 1055:	      index = i;
    #####: 1056:	      break;
        -: 1057:	    }
    #####: 1058:	}
    #####: 1059:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1060:	{
        -: 1061:	  //trash both treasure cards
    #####: 1062:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1063:	  discardCard(index, currentPlayer, state, 1);
        -: 1064:
        -: 1065:	  //gain 4 Gold cards
    #####: 1066:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1067:	    {
    #####: 1068:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1069:	    }
        -: 1070:
        -: 1071:	  //return success
    #####: 1072:	  return 1;
        -: 1073:	}
        -: 1074:
        -: 1075:      //no second treasure_map found in hand
    #####: 1076:      return -1;
        -: 1077:    }
        -: 1078:
    #####: 1079:  return -1;
       53: 1080:}
        -: 1081:
function discardCard called 6 returned 100% blocks executed 80%
        -: 1082:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1083:{
        -: 1084:
        -: 1085:  //if card is not trashed, added to Played pile
        6: 1086:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1087:    {
        -: 1088:      //add card to played pile
        6: 1089:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        6: 1090:      state->playedCardCount++;
        6: 1091:    }
        -: 1092:
        -: 1093:  //set played card to -1
        6: 1094:  state->hand[currentPlayer][handPos] = -1;
        -: 1095:
        -: 1096:  //remove card from player's hand
        6: 1097:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1098:    {
        -: 1099:      //reduce number of cards in hand
    #####: 1100:      state->handCount[currentPlayer]--;
    #####: 1101:    }
        6: 1102:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1103:    {
        -: 1104:      //reduce number of cards in hand
    #####: 1105:      state->handCount[currentPlayer]--;
    #####: 1106:    }
        -: 1107:  else
        -: 1108:    {
        -: 1109:      //replace discarded card with last card in hand
        6: 1110:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1111:      //set last card to -1
        6: 1112:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1113:      //reduce number of cards in hand
        6: 1114:      state->handCount[currentPlayer]--;
        -: 1115:    }
        -: 1116:
        6: 1117:  return 0;
        -: 1118:}
        -: 1119:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1120:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1121:{
        -: 1122:  //Note: supplyPos is enum of choosen card
        -: 1123:
        -: 1124:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1125:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1126:    {
    #####: 1127:      return -1;
        -: 1128:    }
        -: 1129:
        -: 1130:  //added card for [whoseTurn] current player:
        -: 1131:  // toFlag = 0 : add to discard
        -: 1132:  // toFlag = 1 : add to deck
        -: 1133:  // toFlag = 2 : add to hand
        -: 1134:
    #####: 1135:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1136:    {
    #####: 1137:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1138:      state->deckCount[player]++;
    #####: 1139:    }
    #####: 1140:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1141:    {
    #####: 1142:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1143:      state->handCount[player]++;
    #####: 1144:    }
        -: 1145:  else
        -: 1146:    {
    #####: 1147:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1148:      state->discardCount[player]++;
        -: 1149:    }
        -: 1150:
        -: 1151:  //decrease number in supply pile
    #####: 1152:  state->supplyCount[supplyPos]--;
        -: 1153:
    #####: 1154:  return 0;
    #####: 1155:}
        -: 1156:
function updateCoins called 51 returned 100% blocks executed 100%
        -: 1157:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1158:{
        -: 1159:  int i;
        -: 1160:
        -: 1161:  //reset coin count
       51: 1162:  state->coins = 0;
        -: 1163:
        -: 1164:  //add coins for each Treasure card in player's hand
      616: 1165:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1166:    {
      257: 1167:      if (state->hand[player][i] == copper)
branch  0 taken 63%
branch  1 taken 37%
        -: 1168:	{
      163: 1169:	  state->coins += 1;
      163: 1170:	}
       94: 1171:      else if (state->hand[player][i] == silver)
branch  0 taken 6%
branch  1 taken 94%
        -: 1172:	{
        6: 1173:	  state->coins += 2;
        6: 1174:	}
       88: 1175:      else if (state->hand[player][i] == gold)
branch  0 taken 1%
branch  1 taken 99%
        -: 1176:	{
        1: 1177:	  state->coins += 3;
        1: 1178:	}
      257: 1179:    }
        -: 1180:
        -: 1181:  //add bonus
       51: 1182:  state->coins += bonus;
        -: 1183:
       51: 1184:  return 0;
        -: 1185:}
        -: 1186:
        -: 1187://///////////////////////cardEffect's functions
function cardEffect_adventurer called 51 returned 100% blocks executed 100%
        -: 1188:int cardEffect_adventurer(int drawntreasure,int currentPlayer,int z,struct gameState *state)
        -: 1189:{
        -: 1190:  int cardDrawn;
        -: 1191:  int temphand[MAX_HAND];
      350: 1192:  while(drawntreasure<2){
branch  0 taken 71%
branch  1 taken 29%
        -: 1193:    //printf("dominion.c adventurer\n");
      124: 1194:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 2%
branch  1 taken 98%
        3: 1195:      shuffle(currentPlayer, state);
        3: 1196:    }
      124: 1197:    drawCard(currentPlayer, state);
        -: 1198:    //printf("currentPlayer: %d,%d\n", whoseTurn(state),currentPlayer);
      124: 1199:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      168: 1200:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 18%
branch  1 taken 82%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        -: 1201:      {
      102: 1202:        drawntreasure++;
        -: 1203:        //printf("%d\n",state->handCount[currentPlayer]);
      102: 1204:      }
        -: 1205:    else{
       22: 1206:      temphand[z]=cardDrawn;
       22: 1207:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       22: 1208:      z++;
        -: 1209:    }
        -: 1210:    //printf("handCount-after:%d\n", state->handCount[currentPlayer]);
        -: 1211:    }
      146: 1212:    while(z-1>=0){
branch  0 taken 30%
branch  1 taken 70%
       22: 1213:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       22: 1214:      z=z-1;
        -: 1215:    }
        -: 1216:    //printf("handCount after adventurer%d\n", state->handCount[currentPlayer]);
       51: 1217:    return 0;
        -: 1218:}
function cardEffect_council_room called 3 returned 100% blocks executed 100%
        -: 1219:int cardEffect_council_room(int handPos,struct gameState *state)
        -: 1220:{
        -: 1221:  int i;
        3: 1222:  int currentPlayer = whoseTurn(state);
        -: 1223:  //+4 Cards
       30: 1224:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1225:  {
       12: 1226:    drawCard(currentPlayer, state);
       12: 1227:  }
        -: 1228:
        -: 1229:  //+1 Buy
        3: 1230:  state->numBuys++;
        -: 1231:
        -: 1232:  //Each other player draws a card
       18: 1233:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -: 1234:  {
        6: 1235:      drawCard(i, state);
        6: 1236:  }
        -: 1237:
        -: 1238:    //put played card in played card pile
        3: 1239:    discardCard(handPos, currentPlayer, state, 0);
        3: 1240:    return 0;
        -: 1241:}
        -: 1242:
function cardEffect_feast called 0 returned 0% blocks executed 0%
        -: 1243:int cardEffect_feast(int choice1,struct gameState *state)
        -: 1244:{
        -: 1245:  //gain card with cost up to 5
        -: 1246:  //Backup hand
        -: 1247:  int i;
        -: 1248:  int x;
    #####: 1249:  int currentPlayer = whoseTurn(state);
        -: 1250:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1251:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1252:temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1253:state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1254:  }
        -: 1255:  //Backup hand
        -: 1256:
        -: 1257:  //Update Coins for Buy
    #####: 1258:  updateCoins(currentPlayer, state, 5);
    #####: 1259:  x = 1;//Condition to loop on
    #####: 1260:  while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1261:if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -: 1262:if (DEBUG)
        -: 1263:  printf("None of that card left, sorry!\n");
        -: 1264:
        -: 1265:if (DEBUG){
        -: 1266:  printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1267:}
    #####: 1268:}
    #####: 1269:else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####: 1270:printf("That card is too expensive!\n");
        -: 1271:
        -: 1272:if (DEBUG){
        -: 1273:  printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1274:}
    #####: 1275:}
        -: 1276:else{
        -: 1277:
        -: 1278:if (DEBUG){
        -: 1279:  printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1280:}
        -: 1281:
    #####: 1282:gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1283:x = 0;//No more buying cards
        -: 1284:
        -: 1285:if (DEBUG){
        -: 1286:  printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1287:}
        -: 1288:
        -: 1289:}
        -: 1290:  }
        -: 1291:
        -: 1292:  //Reset Hand
    #####: 1293:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1294:state->hand[currentPlayer][i] = temphand[i];
    #####: 1295:temphand[i] = -1;
    #####: 1296:  }
        -: 1297:  //Reset Hand
        -: 1298:
    #####: 1299:  return 0;
        -: 1300:}
        -: 1301:
function cardEffect_mine called 0 returned 0% blocks executed 0%
        -: 1302:int cardEffect_mine(int handPos,int choice1,int choice2,struct gameState *state)
        -: 1303:{
        -: 1304:  int i;
        -: 1305:  int j;
    #####: 1306:  int currentPlayer = whoseTurn(state);
    #####: 1307:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1308:
    #####: 1309:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1310:{
    #####: 1311:return -1;
        -: 1312:}
        -: 1313:
    #####: 1314:  if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1315:{
    #####: 1316:return -1;
        -: 1317:}
        -: 1318:
    #####: 1319:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1320:{
    #####: 1321:return -1;
        -: 1322:}
        -: 1323:
    #####: 1324:  gainCard(choice2, state, 2, currentPlayer);
        -: 1325:
        -: 1326:  //discard card from hand
    #####: 1327:  discardCard(handPos, currentPlayer, state, 0);
        -: 1328:
        -: 1329:  //discard trashed card
    #####: 1330:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1331:{
    #####: 1332:if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1333:  {
    #####: 1334:    discardCard(i, currentPlayer, state, 0);
    #####: 1335:    break;
        -: 1336:  }
    #####: 1337:}
    #####: 1338:return 0;
    #####: 1339:}
        -: 1340:
function cardEffect_remodel called 0 returned 0% blocks executed 0%
        -: 1341:int cardEffect_remodel(int handPos,int choice1,int choice2,struct gameState *state)
        -: 1342:{
        -: 1343:  int j;
        -: 1344:  int i;
    #####: 1345:  int currentPlayer = whoseTurn(state);
    #####: 1346:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1347:
    #####: 1348:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1349:{
    #####: 1350:return -1;
        -: 1351:}
        -: 1352:
    #####: 1353:  gainCard(choice2, state, 0, currentPlayer);
        -: 1354:
        -: 1355:  //discard card from hand
    #####: 1356:  discardCard(handPos, currentPlayer, state, 0);
        -: 1357:
        -: 1358:  //discard trashed card
    #####: 1359:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1360:{
    #####: 1361:if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1362:  {
    #####: 1363:    discardCard(i, currentPlayer, state, 0);
    #####: 1364:    break;
        -: 1365:  }
    #####: 1366:}
    #####: 1367:return 0;
    #####: 1368:}
        -: 1369:
function cardEffect_smithy called 1 returned 100% blocks executed 100%
        -: 1370:int cardEffect_smithy(int handPos,struct gameState *state)
        -: 1371:{
        -: 1372:  int i;
        1: 1373:  int currentPlayer = whoseTurn(state);
        6: 1374:  for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33%
        -: 1375:{
        2: 1376:drawCard(currentPlayer, state);
        2: 1377:}
        -: 1378:
        -: 1379:  //discard card from hand
        1: 1380:  discardCard(handPos, currentPlayer, state, 0);
        1: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
