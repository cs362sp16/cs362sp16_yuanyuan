        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1://This test is to test the function initializeGame
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:void  testInitializeGame(int randomSeed,struct gameState *p);
        -:    9:
        -:   10:int main (int argc, char** argv) {
        -:   11:  struct gameState G;
    #####:   12:  struct gameState *p = &G;
    #####:   13:  testInitializeGame(atoi(argv[1]),p);
    #####:   14:    return 0;
        -:   15:}
        -:   16:
        -:   17:void testInitializeGame(int randomSeed,struct gameState *p){
    #####:   18:  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   19:     sea_hag, tribute, smithy};
    #####:   20:  initializeGame(2, k, randomSeed, p);
    #####:   21:  assert(10==p->supplyCount[curse]);
    #####:   22:  assert(p->handCount[0]==5);
    #####:   23:  assert(p->handCount[1]==5);
    #####:   24:  printf("Test for the initializeGame function success.\n");
    #####:   25:}
        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1://This test is to test the function playCard
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:
        -:    9:void testPlayCard(struct gameState *p);
        -:   10:
        -:   11:int main (int argc, char** argv) {
        -:   12:  struct gameState G;
    #####:   13:  struct gameState *p = &G;
    #####:   14:  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   15:     sea_hag, tribute, smithy};
    #####:   16:  initializeGame(2, k, atoi(argv[1]), p);
    #####:   17:  testPlayCard(p);
    #####:   18:  printf("Test for the playCard function success.\n");
    #####:   19:    return 0;
        -:   20:}
        -:   21:
        -:   22:void testPlayCard(struct gameState *p){
    #####:   23:  assert(playCard(3,-1,-1,-1,p)==-1);
    #####:   24:  p->hand[0][1]=7;
    #####:   25:  assert(playCard(1,-1,-1,-1,p)==0);
    #####:   26:  assert(p->numActions==0);
    #####:   27:}
        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1://This test is to test the function updateCoins
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:void testUpdateCoins(struct gameState *p);
        -:    9:
        -:   10:int main (int argc, char** argv) {
        -:   11:  struct gameState G;
    #####:   12:  struct gameState *p = &G;
    #####:   13:  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   14:     sea_hag, tribute, smithy};
    #####:   15:  initializeGame(2, k, atoi(argv[1]), p);
    #####:   16:  testUpdateCoins(p);
    #####:   17:    return 0;
        -:   18:}
        -:   19:
        -:   20:void testUpdateCoins(struct gameState *p){
    #####:   21:    for (int i = 0; i < p->handCount[0]; i++) {
    #####:   22:      p->hand[0][i] = copper;
    #####:   23:    }
    #####:   24:    updateCoins(0,p,3);
    #####:   25:    assert(p->coins==8);
    #####:   26:    for (int i = 0; i < p->handCount[0]; i++) {
    #####:   27:      p->hand[0][i] = silver;
    #####:   28:    }
    #####:   29:    updateCoins(0,p,0);
    #####:   30:    assert(p->coins==10);
    #####:   31:    p->hand[1][0] = copper;
    #####:   32:    p->hand[1][1] = copper;
    #####:   33:    p->hand[1][2] = copper;
    #####:   34:    p->hand[1][3] = silver;
    #####:   35:    p->hand[1][4] = gold;
    #####:   36:    updateCoins(1,p,0);
    #####:   37:    printf("%d\n", p->coins);
    #####:   38:    assert(p->coins==8);
    #####:   39:    printf("Test for function updateCoins success.\n");
    #####:   40:}
        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1://This test is to test the function getCost
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:void testGetcost();
        -:    9:
        -:   10:int main (int argc, char** argv) {
    #####:   11:    testGetcost();
    #####:   12:    printf("Test for the function getCost success.\n");
    #####:   13:    return 0;
        -:   14:}
        -:   15:
        -:   16:void testGetcost(){
    #####:   17:  assert(getCost(0)==0);//curse
    #####:   18:  assert(getCost(1)==2);//estate
    #####:   19:  assert(getCost(2)==5);//duchy
    #####:   20:  assert(getCost(13)==4);//smithy
    #####:   21:  assert(getCost(30)==-1);
    #####:   22:}
        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1://This test is to test the implamentation of card concil_room
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:void test_council_room(struct gameState *p);
        -:    9:
        -:   10:int main (int argc, char** argv) {
        -:   11:  int card; //get the number of adventurer
        -:   12:  struct gameState G;
    #####:   13:  struct gameState *p = &G;
    #####:   14:  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   15:     sea_hag, tribute, smithy};
    #####:   16:  initializeGame(2, k, atoi(argv[1]), p);
    #####:   17:  p->hand[0][1] = council_room;
    #####:   18:  test_council_room(p);
    #####:   19:  printf("Test for the implamentation of card council_room success.\n");
    #####:   20:  return 0;
        -:   21:}
        -:   22:
        -:   23:void test_council_room(struct gameState *p){
        -:   24:  //pass the number of another player's hangcount to the variable.
    #####:   25:  int handCountForplayer1 = p->handCount[1];
    #####:   26:  cardEffect_council_room(1,p);
    #####:   27:  assert(p->handCount[1]-1==handCountForplayer1);
        -:   28:  //After played the card concil_room, this card should be discarded.
    #####:   29:  assert(p->hand[0][1]!=council_room);
    #####:   30:}
        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1://This test is to test the implamentation of card smithy
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:int main (int argc, char** argv) {
        -:    9:  struct gameState G;
    #####:   10:  struct gameState *p = &G;
    #####:   11:  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   12:     sea_hag, tribute, smithy};
    #####:   13:  initializeGame(2, k, atoi(argv[1]), p);
    #####:   14:  p->hand[0][0] = smithy;//let the first card of player 0 be smithy
    #####:   15:  cardEffect_smithy(0,p);
    #####:   16:  printf("%d\n", p->handCount[0]);
    #####:   17:  assert(p->handCount[0]==7);/*After drawn three card, the played card
        -:   18:  should be discarded. Therefore, the number of the player's hand card should be 7.*/
    #####:   19:  printf("The test for the implamentation of smithy successed.\n");
    #####:   20:  return 0;
        -:   21:}
        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1://This test is to test the implamentation of card smithy
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:int main (int argc, char** argv) {
        -:    9:  struct gameState G;
    #####:   10:  struct gameState *p = &G;
    #####:   11:  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   12:     sea_hag, tribute, smithy};
    #####:   13:  initializeGame(2, k, atoi(argv[1]), p);
    #####:   14:  printf("%d,%d\n",p->handCount[0],p->handCount[1]);
    #####:   15:  p->hand[0][0] = minion;//let the first card of player 0 be minion
    #####:   16:  for (int i = 0; i < 5; i++) {
    #####:   17:    drawCard(1,p);
    #####:   18:  }
    #####:   19:  printf("%d\n",p->handCount[1]);
    #####:   20:  cardEffect(minion,-1,0,-1,p,0,-1);//choice 2
    #####:   21:  printf("%d,%d\n",p->handCount[0], p->handCount[1]);
    #####:   22:  assert(p->handCount[0]==4);//other player discard hand and redraw4 cards
    #####:   23:  assert(p->handCount[1]==4);//current player discard played card and draw 4 cards
    #####:   24:  printf("The test for the implamentation of smithy successed.\n");
    #####:   25:  return 0;
        -:   26:}
        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1://This test is to test the implamentation of card smithy
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:int main (int argc, char** argv) {
        -:    9:  int outpostP;
        -:   10:  struct gameState G;
    #####:   11:  struct gameState *p = &G;
    #####:   12:  int k[11] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   13:     sea_hag, tribute, smithy,outpost};
    #####:   14:  initializeGame(2, k, atoi(argv[1]), p);
    #####:   15:  p->hand[0][0] = smithy;//let the first card of player 0 be smithy
    #####:   16:  outpostP = p->outpostPlayed;
    #####:   17:  cardEffect(outpost,-1,-1,-1,p,0,-1);
    #####:   18:  assert(p->outpostPlayed == outpostP+1);
    #####:   19:  printf("The test for the implamentation of outpost successed.\n");
    #####:   20:  return 0;
        -:   21:}
